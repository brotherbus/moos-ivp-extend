	
	
	
	
	
	/*
///////////////////////////////////////////////////////////////////
////////// Step2: INS State and Kalman Filter Update	///////////
///////////////////////////////////////////////////////////////////
	//cout<<"imu"<<endl;	
	//Pegando os estados anteriores
	PK_menos = PK1_menos;
	PK_mais = PK1_menos;//O menos do estado atual e igual ao menos do proximo estado na iteracao anterior
	
	//SO atualiza se receber sinal do GPS
	ic = ic +1;
	if(ic==Ngps)
	{
		//cout<<"gps"<<endl;	
		//YK_ERRo  = XINS[3:5] - [GPSX,GPSY,BUSSOLA]
		Vector3d XINS_3_4_5; XINS_3_4_5 << XK_INS_menos[2], XK_INS_menos[3], XK_INS_menos[4]; 
		Vector3d GPS_COMPASS; GPS_COMPASS << GPS[0], GPS[1], psi_compass;
		Y_ERRO =  XINS_3_4_5 - GPS_COMPASS;
	
		// Gk  = Pk*C_T*(C*Pk*C_T + Rk)^-1
		MatrixXd GK; GK.resize(8,3);
		MatrixXd inter;inter.resize(3,3);
		MatrixXd inter_inv;inter_inv.resize(3,3);
		inter = C_ERROS*PK_menos*C_ERROS_T + RK; 
		inter_inv = inter.inverse();//Para 3x3 esse algoritmo e otmizado,
		GK = PK_menos*C_ERROS_T*inter_inv;
	
		//Pk+ =(I8 - Gk*C)*Pk-
		PK_mais = (I8 - GK*C_ERROS)*PK_menos;
	
		//XK_ERRO = [0B IAs] + GK*YK_ERRO
		VectorXd ZeroBias;ZeroBias.resize(8);ZeroBias << 0, 0, 0, 0, 0, BiasK_menos[0], BiasK_menos[1], BiasK_menos[2];
		X_ERRO = ZeroBias+  GK*Y_ERRO;
		//cout<<"X_ERRO"<< X_ERRO << endl;
	
		VectorXd XerroINS; XerroINS.resize(5); XerroINS << X_ERRO[0],X_ERRO[1],X_ERRO[2],X_ERRO[3],X_ERRO[4];
		XK_INS_mais = XK_INS_menos - XerroINS;
		//Esse e o meu estado estimado
	
		//Bias+ = X_ERRO [6:8]
		BiasK_mais[0] = X_ERRO[5];
		BiasK_mais[1] = X_ERRO[6];
		BiasK_mais[2] = X_ERRO[7];
		ic=0;
	}

///////////////////////////////////////////////////////////////////
////////// Step3: INS State and Kalman Filter Propagate	///////////
///////////////////////////////////////////////////////////////////	

	
	//U_INS sao os valores da imu com o bias corrigido
	U_INS = U_IMU - BiasK_mais;//[abx aby wz]
	
	/*
	//Integrando
	tempo_anterior = tempo_atual;
	tempo_atual = MOOSTime();
	double t = tempo_atual;
	double dt = tempo_atual-tempo_anterior;
	cout<<"dt "<<dt<<endl;
	//x[0]=XK_INS_mais[0];
	//x[1]=XK_INS_mais[1];
	//x[2]=XK_INS_mais[2];
	//x[3]=XK_INS_mais[3];
	//x[4]=XK_INS_mais[4];
	stepper.do_step([this]( const state_type &x , state_type &dxdt , const double  t)
	{
		double abx = U_INS[0];
		double aby = U_INS[1];
		double wz = U_INS[2];
		double vx = XK_INS_mais[0];
		double vy = XK_INS_mais[1];
		double psi = XK_INS_mais[4];
		//equacao para o dxINS
		dxdt[0] = abx*cos(psi) - aby*sin(psi); 
		dxdt[1] = abx*sin(psi) + aby*cos(psi);
		dxdt[2] = vx; 
		dxdt[3] = vy;
		dxdt[4] = wz;
 	}, x , t , dt );
 	//Salvando o resultado da integracao em uma variavel de outra biblioteca
	XK_INS_menos[0] = x[0];
	XK_INS_menos[1] = x[1];
	XK_INS_menos[2] = x[2];
	XK_INS_menos[3] = x[3];
	XK_INS_menos[4] = x[4];
	*/
	
	//Inicial - funcionando
	//Integracao do modelo para poder calcular a estimativa da IMU
	//Colocando nomes amigaveis nas variaveis
	//Vetor de entrada UINS
	/*
	double abx = U_INS[0];
	double aby = U_INS[1];
	double wz = U_INS[2];
	//Vetor de estados XINS
	double vx = XK_INS_mais[0];
	double vy = XK_INS_mais[1];
	double psi = XK_INS_mais[4];
	
	//dXINS = f(XINS, UINS)
	VectorXd dX_INS;// [dVx dVy dPx dPy dPsi]
	dX_INS.resize(5);
	dX_INS[0] = abx*cos(psi) - aby*sin(psi); 
	dX_INS[1] = abx*sin(psi) + aby*cos(psi);
	dX_INS[2] = vx; 
	dX_INS[3] = vy;
	dX_INS[4] = wz;
	
	//Integrando (Conferir esses intervalos de integracao)
	//Atualiza o X_INS para a proxima iteracao
	XK1_INS_menos[0] = dX_INS[0]*T + XK_INS_mais[0];
	XK1_INS_menos[1] = dX_INS[1]*T + XK_INS_mais[1];
	XK1_INS_menos[2] = dX_INS[2]*T + XK_INS_mais[2];
	XK1_INS_menos[3] = dX_INS[3]*T + XK_INS_mais[3];
	XK1_INS_menos[4] = dX_INS[4]*T + XK_INS_mais[4];

	//Bias- da proxima iteracao = bias+
	BiasK_menos = BiasK_mais;
	
	
	//Propagacao do Filtro de Kalman
	// Matriz da dinamica de erros
	double x5ins = XK_INS_menos[4];
	double alpha = cos(x5ins);
	double beta = sin(x5ins);
	//Matriz discreta - Obtida utilizando o software Mathematica
	MatrixXd Ad_ERROS;
	MatrixXd Ad_ERROS_T;//Matriz transposta
	Ad_ERROS.resize(8,8);
	Ad_ERROS_T.resize(8,8);
	Ad_ERROS<< 1, 0, 0, 0, 0,	T*alpha,		-T*beta,			0,
			   0, 1, 0, 0, 0,   T*beta,      	 T*alpha, 			0,
			   T, 0, 1, 0, 0,   T*T*alpha/2, 	-T*T*beta/2,		0,
			   0, T, 0, 1, 0,   T*T*beta/2,	 	 T*T*alpha/2,		0,
			   0, 0, 0, 0, 1, 		0,				0,				T,	
			   0, 0, 0, 0, 0, 		1,				0,				0,
			   0, 0, 0, 0, 0, 		0,				1,				0,
			   0, 0, 0, 0, 0, 		0,				0,				1;
	Ad_ERROS_T = Ad_ERROS.transpose();
	
	MatrixXd Bd_ERROS;
	MatrixXd Bd_ERROS_T;//Transposta
	Bd_ERROS.resize(8,3);
	Bd_ERROS_T.resize(3,8);
	Bd_ERROS << T*alpha, 		   -T*beta, 			0,
			    T*beta, 			T*alpha, 			0,
			    T*T*alpha/2,	   -T*T*beta/2,			0,
			   	T*T*beta/2,			T*T*alpha/2,		0,
		    		0,					0,				T,	
		  		  	0,					0,				0,
		   			0,					0,				0,
		    		0,					0,				0;
	Bd_ERROS_T = Bd_ERROS.transpose();
	//Conferir para ver se tem o T mesmo
	cout<<"beta"<<KalmanBeta<<endl;
	PK1_menos = Ad_ERROS*PK_mais*Ad_ERROS_T + Bd_ERROS*QK*Bd_ERROS_T + KalmanBeta*Pbeta;
	//X_INS_mais = X_INS_menos;
	*/
	
	
	
	
	
	
	
	/************************************************************/
	/*    NAME: David Issa Mattos                                              */
	/*    ORGN: MIT                                             */
	/*    FILE: KalmanSensorFusion.cpp                                        */
	/*    DATE:                                                 */
	/************************************************************/

	#include <iterator>
	#include "MBUtils.h"
	#include "KalmanSensorFusion.h"

	using namespace std;
	using namespace boost::numeric::odeint;
	typedef std::vector< double > state_type;

	//---------------------------------------------------------
	// Constructor

	KalmanSensorFusion::KalmanSensorFusion()
	{
		m_iterations = 0;
		m_timewarp   = 1;
	
	    for (int nCount=0; nCount < 5; nCount++)
	  	           x.push_back(0.0);
		x[4]=pi/2;
	    tempo_anterior=0;
	    tempo_atual=0;
	
	
		//Vetores de estados do Filtro de Kalman
		U_INS.resize(3);U_INS << 0,0,pi/2;
		XK_INS_mais.resize(5); XK_INS_mais << 0,0,0,0,pi/2;
		XK_INS_menos.resize(5); XK_INS_menos << 0,0,0,0,pi/2;
		XK1_INS_menos.resize(5); XK1_INS_menos << 0,0,0,0,pi/2;
		XK_INS.resize(5); XK_INS << 0,0,0,0,pi/2;
		XK1_INS.resize(5); XK1_INS << 0,0,0,0,pi/2;
	
		X_ERRO.resize(8); X_ERRO << 0,0,0,0,0,0,0,0;
		Y_ERRO.resize(3);Y_ERRO << 0,0,0;//[pxINS pyINS psiINS]
		BiasK_menos.resize(3); BiasK_menos << 0.1,0.1,0.1;
		BiasK_mais.resize(3); BiasK_mais = BiasK_menos;
	
		BiasK.resize(3); BiasK << 2,2,1;
		BiasK1.resize(3); BiasK1 = BiasK;
	
	
		//P0_diag.resize(8); P0_diag << 20, 20, 20, 20, (pi/2)*(pi/2), 50, 50, (50*pi/180)*(50*pi/180);
		//P_beta.resize(8); P0_diag << 10, 10, 1, 1, (pi/2)*(pi/2), 100, 100, 0.1;
	
		P0_diag.resize(8); P0_diag << 100, 100, 100, 100, (pi/2)*(pi/2), 25, 25, (pi/2)*(pi/2);
		P_beta.resize(8); P0_diag << 10, 10, 1, 1, (pi/2)*(pi/2), 10, 10, 1;
	
	
		PK.resize(8,8);
		PK1.resize(8,8);
		PK_menos.resize(8,8);
		PK_mais.resize(8,8);
		PK1_menos.resize(8,8);
		P0.resize(8,8);
		P0 = P0_diag.asDiagonal();
		Pbeta.resize(8,8);
		Pbeta = P_beta.asDiagonal();
		PK= P0;
		PK1 = P0;
		PK_menos = P0;
		PK_mais = P0;
		PK1_menos = P0;
	
		//Constante beta para evitar a divergencia
		KalmanBeta = 1/10000;
	
	
	
		//Medidas e estimativas
		U_IMU.resize(3);U_IMU<<0,0,0;
		compass = 0;
		psi_compass = pi/2;
		GPS.resize(2); GPS << 0,0;
	
		//IMU
		VarIMU.resize(3); VarIMU << 0.01, 0.01, 0.01;//Variancia [Axb Ayb Wz]
		QK = VarIMU.asDiagonal();
	
		//GPS e bussola
		//Na pratica sao os valores medidos
		VarCOMP.resize(1); VarCOMP << (2*pi/180)*(2*pi/180);//Variancia da Bussola
		VarGPS.resize(2); VarGPS << 1, 1;//Variancia do GPS	
		RK.resize(3,3);
		RK << VarGPS[0], 	0,	 	0,
				0,		VarGPS[1],	0,
				0,			0,		VarCOMP[0];
	
	
	
		//Matrizes consantes do Espaco de estados
		C_ERROS.resize(3,8);
		C_ERROS_T.resize(8,3);
		C_ERROS << 0, 0, 1, 0, 0, 0, 0,	0,
				   0, 0, 0, 1, 0, 0, 0, 0,
				   0, 0, 0, 0, 1, 0, 0,	0;
	
	   	C_ERROS_T = C_ERROS.transpose();	
		I8 = Matrix<double, 8, 8>::Identity();

		//Constante da Discretizacao
		T = 0.25;
		ic=0;
		Ngps = 4;
		Tgps = 4*T;

	}

	//---------------------------------------------------------
	// Destructor

	KalmanSensorFusion::~KalmanSensorFusion()
	{
	}

	//---------------------------------------------------------
	// Procedure: OnNewMail

	bool KalmanSensorFusion::OnNewMail(MOOSMSG_LIST &NewMail)
	{
	    MOOSMSG_LIST::iterator p;
	    for(p=NewMail.begin(); p!=NewMail.end(); p++) 
		{
		    CMOOSMsg &msg = *p;
			string key = msg.GetKey();//Nome da mensagem
			//Medidas do Acelerometro
			if(key == "IMU_AX")
		  	{
		  		U_IMU[0] = msg.GetDouble();
		  	}
		    if(key == "IMU_AY")
		  	{
		  		U_IMU[1] = msg.GetDouble();
		  	}
		    if(key == "IMU_ATIME")
		  	{
		  		dt_accel = msg.GetDouble();
		  	}
		
			//Medida do Gyro
		    if(key == "IMU_WZ")
		  	{
		  		U_IMU[2] = msg.GetDouble();
		  	}
		    if(key == "IMU_WTIME")
		  	{
		  		dt_gyro = msg.GetDouble();
		  	}
		
			//Medida da Bussola
		    if(key == "IMU_HEADING")
		  	{
		  		compass = msg.GetDouble();
				//Convertendo para o referencial correto de psi
				psi_compass = (90 - compass)*pi/180;
				while(psi_compass<0 || psi_compass>2*pi)
				{
					if(psi_compass<0){psi_compass = psi_compass + 2*pi;}
					if(psi_compass>360){psi_compass = psi_compass - 2*pi;}
				}
		  	}

			//Medidas do GPS
		    if(key == "GPS_X")
		  	{
		  		GPS[0] = msg.GetDouble();
		  	}
		    if(key == "GPS_Y")
		  	{
		  		GPS[1] = msg.GetDouble();
		  	}
		

		
		 }
	   return(true);
	}

	//---------------------------------------------------------
	// Procedure: OnConnectToServer

	bool KalmanSensorFusion::OnConnectToServer()
	{
	   RegisterVariables();
	   return(true);
	}

	//---------------------------------------------------------
	// Procedure: Iterate()
	//            happens AppTick times per second

	bool KalmanSensorFusion::Iterate()
	{
		m_iterations++;
		if(m_iterations!=0)
		{
		
		
			KalmanFilter();
			double vx = XK_INS[0];
			double vy = XK_INS[1];
			double px = XK_INS[2];
			double py = XK_INS[3];
			double psi = XK_INS[4];
			double heading = (90 - psi*180/pi);
			//double vx = XK_INS_mais[0];
			//double vy = XK_INS_mais[1];
			//double px = XK_INS_mais[2];
			//double py = XK_INS_mais[3];
			//double psi = XK_INS_mais[4];
			//double heading = (90 - psi*180/pi);
			//double heading = psi*180/pi;
			while(heading<0 || heading>360)
			{
				if(heading<0){heading = heading + 360;}
				if(heading>360){heading = heading - 360;}
			}
		
			double speed = sqrt(vx*vx + vy*vy);
			//Notificando o MOOSDB
			for(int i=0;i<8;i++)
			{
				m_Comms.Notify("X_ERRO["+to_string(i)+"]", X_ERRO[i]);//m
				//m_Comms.Notify("PK["+to_string(i)+"]", PK_mais(i,i));//m
				m_Comms.Notify("PK["+to_string(i)+"]", PK(i,i));//m
			}
			m_Comms.Notify("NAV_X", px);//m
		  	m_Comms.Notify("NAV_Y",py);//m
			m_Comms.Notify("NAV_HEADING",heading);//degree
			m_Comms.Notify("NAV_SPEED",speed);//m/s
		
	
		}	
		return(true);
	}

	//---------------------------------------------------------
	// Procedure: OnStartUp()
	//            happens before connection is open

	bool KalmanSensorFusion::OnStartUp()
	{
	    cout<<"Startup"<<endl;
	    list<string> sParams;
	    m_MissionReader.EnableVerbatimQuoting(false);
	    if(m_MissionReader.GetConfiguration(GetAppName(), sParams))
	    {
			list<string>::iterator p;
			for(p=sParams.begin(); p!=sParams.end(); p++) 
			{
			    string original_line = *p;
			    string param = stripBlankEnds(toupper(biteString(*p, '=')));
			    string value = stripBlankEnds(*p);
			  //A principio nao recebe nenhum parametro de startup
			  	if(param == "BETA")
				{
		  		  std::string valor = value;
		  		  KalmanBeta = std::stod (valor.c_str());
				}
			}
	    }
  
	    m_timewarp = GetMOOSTimeWarp();

	    RegisterVariables();	
	    return(true);
	}

	//---------------------------------------------------------
	// Procedure: RegisterVariables

	void KalmanSensorFusion::RegisterVariables()
	{
		//Registra para as variaveis do acelerometro, giroscopio, bussola e GPS
		//Acelerometro
		m_Comms.Register("IMU_AX", 0);
		m_Comms.Register("IMU_AY", 0);
		m_Comms.Register("IMU_AZ", 0);
		m_Comms.Register("IMU_ATIME", 0);
		//Giroscopio
		m_Comms.Register("IMU_WX", 0);
		m_Comms.Register("IMU_WY", 0);
		m_Comms.Register("IMU_WZ", 0);
		m_Comms.Register("IMU_WTIME", 0);
		//Bussola
		m_Comms.Register("IMU_HEADING", 0);
		//GPS
		m_Comms.Register("GPS_X", 0);
		m_Comms.Register("GPS_Y", 0);
	}


	//---------------------------------------------------------
	//Kalman FIlter Section
	
	void KalmanSensorFusion::KalmanFilter()
	{
		U_INS = U_IMU - BiasK;//[abx aby wz]
		//Integrando
		x[0]=XK_INS[0];
		x[1]=XK_INS[1];
		x[2]=XK_INS[2];
		x[3]=XK_INS[3];
		x[4]=XK_INS[4];
		double dt = T;
		stepper.do_step([this]( const state_type &x , state_type &dxdt , const double  t)
		{
			double abx = U_INS[0];
			double aby = U_INS[1];
			double wz = U_INS[2];
			double vx = x[0];
			double vy = x[1];
			double psi = x[4];
			//equacao para o dxINS
			dxdt[0] = abx*cos(psi) - aby*sin(psi); 
			dxdt[1] = abx*sin(psi) + aby*cos(psi);
			dxdt[2] = vx; 
			dxdt[3] = vy;
			dxdt[4] = wz;
	 	}, x , T , T );
	 	//Salvando o resultado da integracao em uma variavel de outra biblioteca
		XK1_INS[0] = x[0];
		XK1_INS[1] = x[1];
		XK1_INS[2] = x[2];
		XK1_INS[3] = x[3];
		XK1_INS[4] = x[4];

		BiasK1 = BiasK;

		//Propagacao do Filtro de Kalman
		// Matriz da dinamica de erros
		double x5ins = XK_INS[4];
		double alpha = cos(x5ins);
		double beta = sin(x5ins);
		//Matriz discreta - Obtida utilizando o software Mathematica
		MatrixXd Ad_ERROS;
		MatrixXd Ad_ERROS_T;//Matriz transposta
		Ad_ERROS.resize(8,8);
		Ad_ERROS_T.resize(8,8);
		Ad_ERROS<< 1, 0, 0, 0, 0,	T*alpha,		-T*beta,			0,
				   0, 1, 0, 0, 0,   T*beta,      	 T*alpha, 			0,
				   T, 0, 1, 0, 0,   T*T*alpha/2, 	-T*T*beta/2,		0,
				   0, T, 0, 1, 0,   T*T*beta/2,	 	 T*T*alpha/2,		0,
				   0, 0, 0, 0, 1, 		0,				0,				T,	
				   0, 0, 0, 0, 0, 		1,				0,				0,
				   0, 0, 0, 0, 0, 		0,				1,				0,
				   0, 0, 0, 0, 0, 		0,				0,				1;
		Ad_ERROS_T = Ad_ERROS.transpose();
	
		MatrixXd Bd_ERROS;
		MatrixXd Bd_ERROS_T;//Transposta
		Bd_ERROS.resize(8,3);
		Bd_ERROS_T.resize(3,8);
		Bd_ERROS << T*alpha, 		   -T*beta, 			0,
				    T*beta, 			T*alpha, 			0,
				    T*T*alpha/2,	   -T*T*beta/2,			0,
				   	T*T*beta/2,			T*T*alpha/2,		0,
			    		0,					0,				T,	
			  		  	0,					0,				0,
			   			0,					0,				0,
			    		0,					0,				0;
		Bd_ERROS_T = Bd_ERROS.transpose();
		//Conferir para ver se tem o T mesmo
		cout<<"beta"<<KalmanBeta<<endl;
		PK1 = Ad_ERROS*PK*Ad_ERROS_T + Bd_ERROS*QK*T*Bd_ERROS_T + KalmanBeta*Pbeta;

	
		ic = ic +1;
		if(ic==Ngps)
		{
			// Gk  = Pk*C_T*(C*Pk*C_T + Rk)^-1
			MatrixXd GK; GK.resize(8,3);
			MatrixXd inter;inter.resize(3,3);
			MatrixXd inter_inv;inter_inv.resize(3,3);
			inter = C_ERROS*PK1*C_ERROS_T + RK; 
			inter_inv = inter.inverse();//Para 3x3 esse algoritmo e otmizado,
			GK = PK1*C_ERROS_T*inter_inv;
		
			MatrixXd pk1_inter;pk1_inter.resize(8,8);
			pk1_inter = (I8 - GK*C_ERROS)*PK1;
			PK1 = pk1_inter;
		
			Vector3d XINS_3_4_5; XINS_3_4_5 << XK_INS[2], XK_INS[3], XK_INS[4]; 
			Vector3d GPS_COMPASS; GPS_COMPASS << GPS[0], GPS[1], psi_compass;
			Y_ERRO =  XINS_3_4_5 - GPS_COMPASS;
		
			VectorXd ZeroBias;ZeroBias.resize(8);ZeroBias << 0, 0, 0, 0, 0, BiasK1[0], BiasK1[1], BiasK1[2];
			X_ERRO = ZeroBias + GK*Y_ERRO;
		
		
			VectorXd XerroINS; XerroINS.resize(5); XerroINS << X_ERRO[0],X_ERRO[1],X_ERRO[2],X_ERRO[3],X_ERRO[4];
			XK1_INS = XK1_INS - XerroINS;
		
			BiasK1[0] = X_ERRO[5];
			BiasK1[1] = X_ERRO[6];
			BiasK1[2] = X_ERRO[7];
			ic=0;
		}
	
		//Proximo estado
		PK = PK1;
		XK_INS = XK1_INS;
		BiasK = BiasK1;
	}
	

	