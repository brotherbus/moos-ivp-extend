#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass paper
\begin_preamble
\usepackage{verbatim}
%\usepackage{xcolor}
\usepackage{listings}
\usepackage{textcomp}
\lstdefinestyle{Bash}
{language=bash,
keywordstyle=\color{blue},
basicstyle=\ttfamily,
morekeywords={moosuser@machine},
alsoletter={:~$},
morekeywords=[2]{moosuser@machine:},
keywordstyle=[2]{\color{red}},
literate={\$}{{\textcolor{red}{\$}}}1 
         {:}{{\textcolor{red}{:}}}1
         {~}{{\textcolor{red}{\textasciitilde}}}1,
}

\usepackage[usenames,dvipsnames]{xcolor}

\usepackage{listings}
\definecolor{codebg}{HTML}{E0E0F0}
\lstset{
tabsize=4,
language=Python,
        basicstyle=\small,
        upquote=true,
        %aboveskip={1.5\baselineskip},
        columns=fixed,
        showstringspaces=false,
        extendedchars=true,
        breaklines=true,
        framesep=10pt,
        prebreak = \raisebox{0ex}[0ex][0ex]{\ensuremath{\hookleftarrow}},
        frame=single,
        showtabs=false,
        showspaces=false,
        showstringspaces=false,
        identifierstyle=\ttfamily,
        keywordstyle=\color[rgb]{0,0,1},
        commentstyle=\color[rgb]{0.133,0.545,0.133},
        stringstyle=\color[rgb]{0.627,0.126,0.941},
        backgroundcolor=\color{codebg},
}
\end_preamble
\use_default_options true
\begin_modules
eqs-within-sections
figs-within-sections
logicalmkup
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3cm
\topmargin 3cm
\rightmargin 3cm
\bottommargin 3cm
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
python-moos: Python for MOOS:V10 Communications
\end_layout

\begin_layout Author
Paul Newman, University of Oxford
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename MOOSV-10-256.pdf
	width 3cm

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{2cm}
\end_layout

\end_inset

....ten years on
\end_layout

\begin_layout Standard
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{2cm}
\end_layout

\end_inset

10.0.2
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Getting Started - Acquiring and Building MOOS
\end_layout

\begin_layout Standard
If you already have MOOS::V10 installed and built you can skip this section.
\end_layout

\begin_layout Subsection
Before you start you will need...
\end_layout

\begin_layout Itemize
a working compiler like 
\family typewriter
gcc
\family default
 or 
\family typewriter
clang
\end_layout

\begin_layout Itemize

\family typewriter
CMake
\family default
 installed
\end_layout

\begin_layout Itemize

\family typewriter
git
\family default
 installed (well actually this is optional as you can download the source
 code as .zip file and we won't make much use of git in this tutorial)
\end_layout

\begin_layout Itemize
boost (http://www.boost.org) installed.
 Why you might ask? Well python-moos uses the boost python suite to facilitate
 binding MOOS to python.
 It is dead good.
 You will need boost-python installed.
\end_layout

\begin_layout Subsection
Downloading and Building MOOS V10
\begin_inset CommandInset label
LatexCommand label
name "sub:Downloading-and-Building"

\end_inset


\end_layout

\begin_layout Standard
We shall begin where we should and check out a version of MOOS-V10 from
 a git repos.
 We will follow good practice and do an out of place build - the source
 code will go in 
\begin_inset Quotes eld
\end_inset

src
\begin_inset Quotes erd
\end_inset

 and we will build in 
\begin_inset Quotes eld
\end_inset

build
\begin_inset Quotes erd
\end_inset

.
 We will also, after fetching the source switch to the 
\begin_inset Quotes eld
\end_inset

devel
\begin_inset Quotes erd
\end_inset

 branch because here we are living on the edge 
\begin_inset Foot
status open

\begin_layout Plain Layout
if you want to know what branches are available type 
\family typewriter
git branch
\end_layout

\end_inset


\family typewriter
.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[style=Bash] 
\end_layout

\begin_layout Plain Layout

pmn@mac:~$ mkdir core-moos-v10 
\end_layout

\begin_layout Plain Layout

pmn@mac:~$ cd core-moos-v10
\end_layout

\begin_layout Plain Layout

pmn@mac:~$ git clone https://github.com/themoos/core-moos.git src
\end_layout

\begin_layout Plain Layout

pmn@mac:~$ mkdir build
\end_layout

\begin_layout Plain Layout

pmn@mac:~$ cd build
\end_layout

\begin_layout Plain Layout

pmn@mac:~$ ccmake ../src
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
At this point you should, after hitting 'c' a couple of times be presented
 with a CMake screen that looks like that shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-default-build"

\end_inset

 (note some of the entries are platform dependent so don't worry if what
 you see is not identical to this).
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../../examples-docs-moos/docs/images/v10-simple-build.pdf
	width 90col%

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:The-default-build"

\end_inset

The default build screen for MOOS V10.
 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{5mm}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You are are now in a position to build the MOOS.
 So press 'c' until 'g' appears, then press 'g' and you are good to go.
 Then at the terminal prompt type 'make' to build the project.
 Two directories should have been created 
\series bold
bin
\series default
 and 
\series bold
lib.
 
\series default
In lib you will see 
\family typewriter
libMOOS.a
\family default
 and in 
\family typewriter
bin
\family default
 you will find the newly created 
\family typewriter
MOOSDB
\family default
 and some other fabulous tools like 
\begin_inset Flex Noun
status collapsed

\begin_layout Plain Layout
umm
\end_layout

\end_inset

, 
\begin_inset Flex Noun
status collapsed

\begin_layout Plain Layout
mtm
\end_layout

\end_inset

 and 
\begin_inset Flex Noun
status collapsed

\begin_layout Plain Layout
mqos
\end_layout

\end_inset

.
 Nice job.
\end_layout

\begin_layout Section
Acquiring python-moos
\end_layout

\begin_layout Standard
\begin_inset Flex Noun
status collapsed

\begin_layout Plain Layout
python-moos
\end_layout

\end_inset

 is hosted on github (at time of writing) but where ever you get it from
 the build path looks somethign like this.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[style=Bash] 
\end_layout

\begin_layout Plain Layout

pmn@mac:~$ mkdir python-moos 
\end_layout

\begin_layout Plain Layout

pmn@mac:~$ cd python-moos
\end_layout

\begin_layout Plain Layout

pmn@mac:~$ git clone https://github.com/themoos/python-moos.git src
\end_layout

\begin_layout Plain Layout

pmn@mac:~$ mkdir build
\end_layout

\begin_layout Plain Layout

pmn@mac:~$ cd build
\end_layout

\begin_layout Plain Layout

pmn@mac:~$ ccmake ../src
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
At the end of this process you should see in the build director some example
 python scripts and the python-moos library (most likely called pymoos.so).
 This object is importable into python.
 The next section will show how.
 
\end_layout

\begin_layout Section
Getting help
\end_layout

\begin_layout Standard
You can see quickly seewhat goodies are offered by a class by calling for
 example 
\family typewriter
dir(pymoos.comms),
\family default
 
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout
dir(pymoos.comms)
\end_layout

\end_inset

 or dir(pymoos.moos_msg).
 For example:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[style=Bash] 
\end_layout

\begin_layout Plain Layout

pmn@mac:~$ python
\end_layout

\begin_layout Plain Layout

pmn@mac:~$>> import pymoos
\end_layout

\begin_layout Plain Layout

pmn@mac:~$>> dir(pymoos.comms)
\end_layout

\begin_layout Plain Layout

pmn@mac:~$>>....'add_active_queue', 'add_message_route_to_active_queue', 'close',
 'do_local_time_correction', 'enable_comms_status_monitoring', 'fetch',
 'get_client_comms_status', 'get_client_comms_statuses', 'get_comms_control_time
warp_scale_factor', 'get_community_name', 'get_description', 'get_moos_name',...
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset

Alternatively you can access help via python's 'help' interface which will
 show you all the methods supported and the c++ signatures they wrap.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[style=Bash] 
\end_layout

\begin_layout Plain Layout

pmn@mac:~$ python
\end_layout

\begin_layout Plain Layout

pmn@mac:~$>> import pymoos
\end_layout

\begin_layout Plain Layout

pmn@mac:~$>> help(pymoos.moos_msg)
\end_layout

\begin_layout Plain Layout

|  
\end_layout

\begin_layout Plain Layout

|  binary_data_size(...)  
\end_layout

\begin_layout Plain Layout

|      binary_data_size( (moos_msg)arg1) -> int :  
\end_layout

\begin_layout Plain Layout

|  
\end_layout

\begin_layout Plain Layout

|          C++ signature :  
\end_layout

\begin_layout Plain Layout

|              unsigned int binary_data_size(CMOOSMsg {lvalue})  
\end_layout

\begin_layout Plain Layout

|  
\end_layout

\begin_layout Plain Layout

|  double(...)  
\end_layout

\begin_layout Plain Layout

|      double( (moos_msg)arg1) -> float :  
\end_layout

\begin_layout Plain Layout

|  
\end_layout

\begin_layout Plain Layout

|          C++ signature :  
\end_layout

\begin_layout Plain Layout

|              double double(CMOOSMsg {lvalue})  
\end_layout

\begin_layout Plain Layout

|  
\end_layout

\begin_layout Plain Layout

|  double_aux(...)  
\end_layout

\begin_layout Plain Layout

|      double_aux( (moos_msg)arg1) -> float :  
\end_layout

\begin_layout Plain Layout

|  
\end_layout

\begin_layout Plain Layout

|          C++ signature :  
\end_layout

\begin_layout Plain Layout

|              double double_aux(CMOOSMsg {lvalue})  
\end_layout

\begin_layout Plain Layout

|  
\end_layout

\begin_layout Plain Layout

|  is_binary(...)  
\end_layout

\begin_layout Plain Layout

|      is_binary( (moos_msg)arg1) -> bool :
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Section
A simple python-moos example
\end_layout

\begin_layout Standard
Lets start with the simplest possible MOOS interface - a simple program
 that connects to a MOOS community occasionally sends a message and also
 subscribes to a message - in this case the same one).
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinputlisting[caption={A simple example using python-moos}]{examples/simplecom
ms.py}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
pymoos::comms
\end_layout

\begin_layout Standard
Looking at this example, first we import 
\begin_inset Flex Noun
status collapsed

\begin_layout Plain Layout
pymoos
\end_layout

\end_inset

 and make ourselves a 
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout
pymoos.comms
\end_layout

\end_inset

 object.
 This is the object that provides MOOS comms functionality.
 
\end_layout

\begin_layout Standard
Then we define a function, 
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout
on_connect
\end_layout

\end_inset

 which will be called when we connect to a MOOSDB and in which, as all good
 moos citizens do, we regsiter our interest in messages.
 In this case we want to know about any changes made to 
\family typewriter
simple_var
\family default
.
 
\end_layout

\begin_layout Standard
Then we define a main which begins with installing the connection callback,
 running the the comms and entering a simple a 
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout
while
\end_layout

\end_inset

(1) which sleeps for a second, sends a message and then polls the comms
 object to see if any messages have arrived (with 
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout
comms.fetch()
\end_layout

\end_inset

 ) and, if they have, prints them all out using some fancy python 
\begin_inset Quotes eld
\end_inset

map
\begin_inset Quotes erd
\end_inset

 functionality and the 
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout
pymoos.moos_msg.trace() 
\end_layout

\end_inset

method.
 Note that 
\family typewriter
fetch()
\family default
 returns a python list of 
\family typewriter
moos_msg
\family default
s.
\end_layout

\begin_layout Standard
So we have now seen a trivial example using polling to retrieve any incoming
 messages.
 Before we up our game, it is worth quickly looking at 
\family typewriter
pymoos.moos_msg.
\end_layout

\begin_layout Subsection*
pymoos::moos_msg
\end_layout

\begin_layout Standard
Where in c++ land we have 
\family typewriter
CMOOSMsg
\family default
, in python land we have 
\family typewriter
pymoos.moos_msg.
 
\family default
Many of the methods of the former are exposed in the latter.
 Again you can see them by calling 
\family typewriter
dir(pymoos.moos_msg).

\family default
 
\end_layout

\begin_layout Section
A python-moos example with a message callback
\end_layout

\begin_layout Standard
In the next example, we install a messaging callback( we call it 
\family typewriter
m()
\family default
 here).
 Everytime mail arrives we are given the opportunity to grab it using fetch()
 and print it.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinputlisting[caption={A msg callback example using python-moos}]{examples/cal
lbackcomms.py}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
But do be careful....
\family typewriter
m()
\family default
 is being called in a different thread to the 
\family typewriter
while()
\family default
 loop in main.
 The python interpreter is appropriately locked though so don't panic too
 much.
\end_layout

\begin_layout Section
A python-moos example with active queues
\end_layout

\begin_layout Standard
Active queues are a mechanism to route messages to dedicated handling threads
 or 'queues'.
 As messages are received they can be distributed according to preferences
 configured by a simple API, to activie queues.
 Each named queue processes messages sequentially and applies a user specified
 callback to each message.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinputlisting[caption={A msg callback example using python-moos}]{examples/act
ivequeuecomms.py}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The important lines are
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Python] 
\end_layout

\begin_layout Plain Layout

comms.add_active_queue('the_queue' , queue_callback )
\end_layout

\begin_layout Plain Layout

comms.add_message_route_to_active_queue ('the_queue' , 'binary_var' )
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The first line creates an active queue called '
\family typewriter
the_queue
\family default
' and attaches the function 
\family typewriter
queue
\family default
_
\family typewriter
callback
\family default
 to it.
 The second line instructs the comms object to place a copy of any message
 called 'binary_var' into this queue so it will end up being processed by
 
\family typewriter
queue
\family default
_
\family typewriter
callback.
\end_layout

\begin_layout Section
Dealing with binary data
\end_layout

\begin_layout Standard
MOOS is at home with binary data of course.
 The next example makes this clear by building on the previous active queue
 example.
 You can see if someone sent you binary data via the 
\family typewriter
moos_msg.is_binary() 
\family default
method.
 And you can send binary data with the 
\family typewriter
comms.binary_notify()
\family default
 method
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinputlisting[caption={sending and receiving binary data using python-moos}]{e
xamples/binarycomms.py}
\end_layout

\end_inset


\end_layout

\end_body
\end_document
